import { CloseVectorHNSWWeb, HierarchicalNSWT, CloseVectorHNSWLibArgs, CloseVectorCredentials, HnswlibModule } from "closevector-web";
import { CloseVector } from "./common.js";
import { Embeddings } from "../../embeddings/base.js";
import { Document } from "../../document.js";
/**
 * package closevector-node is largely based on hnswlib.ts in the current folder with the following exceptions:
 * 1. It uses a modified version of hnswlib-node to ensure the generated index can be loaded by closevector_web.ts.
 * 2. It adds features to upload and download the index to/from the CDN provided by CloseVector.
 *
 * For more information, check out https://closevector-docs.getmegaportal.com/
 */
/**
 * Arguments for creating a CloseVectorWeb instance, extending CloseVectorHNSWLibArgs.
 */
export interface CloseVectorWebArgs extends CloseVectorHNSWLibArgs<HierarchicalNSWT> {
    instance?: CloseVectorHNSWWeb;
}
/**
 * Class that implements a vector store using CloseVector, It extends the SaveableVectorStore class and
 * provides methods for adding documents and vectors, performing
 * similarity searches, and saving and loading the vector store.
 */
export declare class CloseVectorWeb extends CloseVector<CloseVectorHNSWWeb> {
    FilterType: (doc: Document) => boolean;
    constructor(embeddings: Embeddings, args: CloseVectorWebArgs, credentials?: CloseVectorCredentials);
    /**
     * Method to save the index to the CloseVector CDN.
     * @param options
     * @param options.url the upload url generated by the CloseVector API: https://closevector-docs.getmegaportal.com/docs/api/http-api/file-url
     * @param options.onProgress a callback function to track the upload progress
     */
    saveToCloud(options: Parameters<typeof this.instance.saveToCloud>[0] & {
        uuid?: string;
    }): Promise<void>;
    /**
     * Method to load the index from the CloseVector CDN.
     * @param options
     * @param options.url the upload url generated by the CloseVector API: https://closevector-docs.getmegaportal.com/docs/api/http-api/file-url
     * @param options.onProgress a callback function to track the upload progress
     * @param options.uuid the uuid of the index to be downloaded
     * @param options.embeddings the embeddings to be used by the CloseVectorWeb instance
     */
    static loadFromCloud(options: Parameters<typeof CloseVectorHNSWWeb.loadFromCloud>[0] & {
        embeddings: Embeddings;
        credentials?: CloseVectorCredentials;
    }): Promise<CloseVectorWeb>;
    /**
     * Static method to load a vector store from a directory. It reads the
     * HNSW index, the arguments, and the document store from the directory,
     * then creates a new CloseVectorWeb instance with these values.
     * @param directory The directory from which to load the vector store.
     * @param embeddings The embeddings to be used by the CloseVectorWeb instance.
     * @returns A Promise that resolves to a new CloseVectorWeb instance.
     */
    static load(directory: string, embeddings: Embeddings, credentials?: CloseVectorCredentials): Promise<CloseVectorWeb>;
    /**
     * Static method to create a new CloseVectorWeb instance from texts and metadata.
     * It creates a new Document instance for each text and metadata, then
     * calls the fromDocuments method to create the CloseVectorWeb instance.
     * @param texts The texts to be used to create the documents.
     * @param metadatas The metadata to be used to create the documents.
     * @param embeddings The embeddings to be used by the CloseVectorWeb instance.
     * @param args An optional configuration object for the CloseVectorWeb instance.
     * @param credential An optional credential object for the CloseVector API.
     * @returns A Promise that resolves to a new CloseVectorWeb instance.
     */
    static fromTexts(texts: string[], metadatas: object[] | object, embeddings: Embeddings, args?: Record<string, unknown>, credential?: CloseVectorCredentials): Promise<CloseVectorWeb>;
    /**
     * Static method to create a new CloseVectorWeb instance from documents. It
     * creates a new CloseVectorWeb instance, adds the documents to it, then returns
     * the instance.
     * @param docs The documents to be added to the CloseVectorWeb instance.
     * @param embeddings The embeddings to be used by the CloseVectorWeb instance.
     * @param args An optional configuration object for the CloseVectorWeb instance.
     * @param credentials An optional credential object for the CloseVector API.
     * @returns A Promise that resolves to a new CloseVectorWeb instance.
     */
    static fromDocuments(docs: Document[], embeddings: Embeddings, args?: Record<string, unknown>, credentials?: CloseVectorCredentials): Promise<CloseVectorWeb>;
    static imports(): Promise<HnswlibModule>;
}
